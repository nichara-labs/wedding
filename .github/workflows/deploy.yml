name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
    paths-ignore: ["**.md"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    env:
      TF_VAR_s3_state_bucket: ${{ vars.DEV_S3_STATE_BUCKET }}
      TF_IN_AUTOMATION: true
      TF_INPUT: false

    steps:
      - uses: actions/checkout@v4

      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_wrapper: false

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ vars.DEV_GHA_IAM_ROLE }}

      - name: Setup infrastructure
        id: tofu-setup
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          cd iac/
          tofu init -reconfigure -lockfile=readonly
          tofu apply -auto-approve

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: frontend/package.json
          run_install: false

      - name: Install Node.js and load pnpm from cache
        uses: actions/setup-node@v4
        with:
          node-version-file: frontend/package.json
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Restore NextJS cache
        uses: actions/cache@v4
        with:
          path: frontend/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend/out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Notify Relationship Manager
        env:
          author: ${{github.event.head_commit.author.name}}
          message: ${{github.event.head_commit.message}}
          BOT_TOKEN: ${{secrets.BOT_TOKEN}}
          CHAT_ID: ${{secrets.CHAT_ID}}
        run: |
          curl -X POST --data-urlencode "chat_id=$CHAT_ID" -d "parse_mode=Markdown" --data-urlencode "text=*chanelandnicholas.com*
          New commit by *$author*" "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
          curl -X POST --data-urlencode "chat_id=$CHAT_ID" --data-urlencode "text=$message" "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
