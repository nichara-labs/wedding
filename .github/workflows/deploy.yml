name: Build, Push and Deploy

on:
  push:
    branches: ["main"]
    paths-ignore: ["**.md"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  ROLE_TO_ASSUME: ${{ vars.PROD_GHA_IAM_ROLE }}

jobs:
  get-commit-metadata:
    uses: extrange/actions/.github/workflows/commit-metadata.yml@v1.5

  deploy-backend:
    runs-on: ubuntu-latest
    needs:
      - get-commit-metadata
    outputs:
      # These are named exactly after the opentofu outputs
      function_url: ${{ steps.setup-infra.outputs.function_url }}
    env:
      TF_VAR_s3_state_bucket: ${{ vars.PROD_S3_STATE_BUCKET }}
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.tofu.d/plugin-cache

    steps:
      - uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}

      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_wrapper: false

      - name: Restore provider cache
        id: cache-providers
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          # Rebuild cache whenever provider versions in the lockfile change
          key: ${{ runner.os }}-tofu-providers-${{ github.ref_name }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tofu-providers-

      - name: Setup ECR # Before we attempt to push the image
        id: setup-ecr
        working-directory: iac/
        env:
          TF_VAR_backend_image_tag: ${{ needs.get-commit-metadata.outputs.sha_short }}
        run: |
          tofu init -reconfigure -lockfile=readonly
          tofu apply \
            -auto-approve \
            -var-file="env-${{ github.ref_name }}.tfvars" \
            -target 'module.ecr'
          tofu output -json -var-file="env-${{ github.ref_name }}.tfvars" | \
            jq -r 'to_entries[] | "\(.key)=\(.value.value|tostring)"' >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Get image tag
        id: image
        run: |
          BASE_TAG=${{ steps.login-ecr.outputs.registry }}/${{ steps.setup-ecr.outputs.repository_name }}
          TAG="$BASE_TAG:${{ needs.get-commit-metadata.outputs.sha_short }}"
          TAG_LATEST="$BASE_TAG:latest"

          {
            echo "tag=${TAG}"
            echo "tag_latest=${TAG_LATEST}"
          } >> "$GITHUB_OUTPUT"

          {
            echo "# Image Tags"
            echo "\`${TAG}\`"
            echo "\`${TAG_LATEST}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # File mutations prior will be ignored, as we use the git commit as build context
      - name: Build, tag, and cache docker image to Amazon ECR
        id: build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6
        with:
          push: true
          target: deployment
          context: "{{defaultContext}}:backend"
          platforms: linux/amd64
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{env.REGISTRY}}/${{ steps.setup-ecr.outputs.repository_name }}:cache
          cache-from: type=registry,ref=${{env.REGISTRY}}/${{ steps.setup-ecr.outputs.repository_name }}:cache
          provenance: false
          tags: |
            ${{ steps.image.outputs.tag }}
            ${{ steps.image.outputs.tag_latest }}

      - name: Setup infrastructure
        id: setup-infra
        working-directory: iac/
        env:
          TF_VAR_image_uri: ${{ steps.image.outputs.tag }}
        run: |
          tofu apply -auto-approve
          tofu output -json | \
            jq -r 'to_entries[] | "\(.key)=\(.value.value|tostring)"' >> "$GITHUB_OUTPUT"

  build-frontend:
    runs-on: ubuntu-latest
    needs:
      - deploy-backend
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          package_json_file: frontend/package.json
          run_install: false

      - name: Install Node.js and load pnpm from cache
        uses: actions/setup-node@v4
        with:
          node-version-file: frontend/package.json
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Restore NextJS cache
        uses: actions/cache@v4
        with:
          path: frontend/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ needs.deploy-backend.outputs.function_url }}
        run: |
          pnpm install
          pnpm build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend/out

  deploy-to-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs:
      - build-frontend
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Notify Relationship Manager
        env:
          author: ${{github.event.head_commit.author.name}}
          message: ${{github.event.head_commit.message}}
          BOT_TOKEN: ${{secrets.BOT_TOKEN}}
          CHAT_ID: ${{secrets.CHAT_ID}}
        run: |
          curl -X POST --data-urlencode "chat_id=$CHAT_ID" -d "parse_mode=Markdown" --data-urlencode "text=*chanelandnicholas.com*
          New commit by *$author*" "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
          curl -X POST --data-urlencode "chat_id=$CHAT_ID" --data-urlencode "text=$message" "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
